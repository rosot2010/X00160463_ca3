/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.11/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    
    id 'java'
    id 'eclipse' // optional (to generate Eclipse project files)
    id 'idea' // optional (to generate IntelliJ IDEA project files)
    id 'jacoco'  // ADD THIS LINE for code coverage
    id "org.sonarqube" version "5.1.0.4882" 
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
    implementation 'org.apache.commons:commons-lang3:3.12.0' 
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation(platform('org.junit:junit-bom:5.11.3'))
    testImplementation('org.junit.jupiter:junit-jupiter')
      // Keep your existing dependencies

    
    // Add Selenium dependencies
    testImplementation 'org.seleniumhq.selenium:selenium-java:4.27.0'
    // This dependency is used by the application.
    implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'todolist'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task showProjectInfo {
    doLast {
        println "Project Name: $project.name"
        println "Java Version: ${java.toolchain.languageVersion.get()}"
        println "Main Class: ${application.mainClass.get()}"
    }
}







test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
         showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
        showStandardStreams = true  // ADD THIS LINE for more detailed output
    }
    finalizedBy jacocoTestReport  // ADD THIS LINE to auto-generate report after tests
}

// ADD THIS BLOCK for JaCoCo configuration
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

